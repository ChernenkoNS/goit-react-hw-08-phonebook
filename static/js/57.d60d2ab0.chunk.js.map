{"version":3,"file":"static/js/57.d60d2ab0.chunk.js","mappings":"+NAIO,SAASA,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAkB7B,OACE,kBAAMC,SAjBa,SAAAC,GACnBA,EAAMC,iBAEN,IAAMC,EAAOF,EAAMG,cAEbC,EAAOF,EAAKG,SAASC,YAAYC,MACjCC,EAASN,EAAKG,SAASI,cAAcF,MAI3C,GAFAG,QAAQC,IAAI,OAAQP,GAEhBR,EAASgB,MAAK,SAAAC,GAAO,OAAIA,EAAQT,OAASA,CAArB,IACvB,OAAOU,MAAM,qBAAD,OAAsBV,EAAtB,qBAEdV,GAASqB,EAAAA,EAAAA,IAAgB,CAAEX,KAAAA,EAAMI,OAAAA,IAClC,EAGC,WACE,8BACE,uBAAG,WACH,kBAAOJ,KAAK,cAAcY,KAAK,OAAOC,UAAQ,QAEhD,mBACA,8BACE,uBAAG,aACH,kBAAOb,KAAK,gBAAgBY,KAAK,OAAOC,UAAQ,QAElD,mBACA,mBAAQD,KAAK,SAAb,SAAsB,kBAG3B,C,cCtCD,EAAyB,uBCCZE,EAAS,SAAC,GAAuB,IAAtBX,EAAqB,EAArBA,MAAOY,EAAc,EAAdA,SAI7B,OACE,mBAAOC,UAAWC,EAAlB,UAA8B,UAE5B,kBAAOL,KAAK,OAAOT,MAAOA,EAAOY,SAAUA,MAGhD,E,UCNYG,EAAc,WACzB,IAAM5B,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAMvByB,EAAeC,MAAMC,QAAQ7B,IAAaA,EAAS8B,OAAS,EAElE,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAWA,OACE,2BACGN,IAAgB,SAACL,EAAD,CAAQX,MAAOqB,EAAaT,SAX5B,SAAAW,GACnB,IAAMvB,EAAQuB,EAAE3B,cAAcI,MAC9BsB,EAAetB,EAChB,KASG,wBACGgB,GACC3B,EAASmC,KAAI,SAAAlB,GACX,OACE,2BACE,0BAAI,SAAOA,EAAQT,SACnB,yBAAG,WAASS,EAAQL,WACpB,oBACEQ,KAAK,SACLgB,QAAS,kBA7BGC,EA6BuBpB,EAAQqB,QA5BzDxC,GAASyC,EAAAA,EAAAA,IAAmBF,IADF,IAAAA,CA6BH,EAFX,UAIG,IAAI,IACH,SARGpB,EAAQqB,GAYpB,QAIV,E,oBCbD,EAtBiB,WACf,IAAME,GAAkBvC,EAAAA,EAAAA,IAAYwC,EAAAA,2BAC9BC,GAAYzC,EAAAA,EAAAA,IAAY0C,EAAAA,IACxBC,GAAQ3C,EAAAA,EAAAA,IAAY4C,EAAAA,IACpB/C,GAAWC,EAAAA,EAAAA,MAQjB,OANA+C,EAAAA,EAAAA,YAAU,WACHN,GAEL1C,GAASiD,EAAAA,EAAAA,MACV,GAAE,CAACP,EAAiB1C,KAGnB,gCACE,SAACD,EAAD,IACC6C,IAAa,SAACM,EAAA,EAAD,IACbJ,IAAS,yBAAG,4BAA0BA,EAAM,QAC7C,SAAClB,EAAD,MAGL,C","sources":["components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { addContactThunk } from 'redux/contacts/contactsOperations';\nimport { selectUserContacts } from 'redux/contacts/contactsSlice';\n\nexport function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectUserContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n\n    const name = form.elements.contactName.value;\n    const number = form.elements.contactNumber.value;\n\n    console.log('name', name);\n\n    if (contacts.some(contact => contact.name === name))\n      return alert(`Contact with name ${name} already exists!`);\n\n    dispatch(addContactThunk({ name, number }));\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        <p>Name:</p>\n        <input name=\"contactName\" type=\"text\" required />\n      </label>\n      <br />\n      <label>\n        <p>Number:</p>\n        <input name=\"contactNumber\" type=\"text\" required />\n      </label>\n      <br />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import css from '../Filter/Filter.module.css';\n\nexport const Filter = ({value, onChange}) => {\n\n\n\n  return (\n    <label className={css.filter}>\n      Filter\n      <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n  );\n};\n","import { Filter } from 'components/Filter/Filter';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contacts/contactsOperations';\nimport { selectUserContacts } from 'redux/contacts/contactsSlice';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectUserContacts);\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContactThunk(contactId));\n  };\n\n  const showContacts = Array.isArray(contacts) && contacts.length > 0;\n\n  const [filterValue, setFilterValue] = useState('');\n\n  const changeFilter = e => {\n    const value = e.currentTarget.value;\n    setFilterValue(value);\n  };\n\n//   const visibleContacts = contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(filterValue.toLowerCase())\n//   );\n\n  return (\n    <div>\n      {showContacts && <Filter value={filterValue} onChange={changeFilter} />}\n      <ul>\n        {showContacts &&\n          contacts.map(contact => {\n            return (\n              <li key={contact.id}>\n                <h3>Name: {contact.name}</h3>\n                <p>Number: {contact.number}</p>\n                <button\n                  type=\"button\"\n                  onClick={() => handleDeleteContact(contact.id)}\n                >\n                  {' '}\n                  X{' '}\n                </button>\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n};\n","// import { ContactForm } from \"components/ContactForm/ContactForm\"\n// import { ContactList } from \"components/ContactList/ContactList\"\n// import { Filter } from \"components/Filter/Filter\"\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Loader } from 'components/Loader/Loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectUserAuthentificated } from 'redux/auth/authSlice';\nimport { requestContactsThunk } from 'redux/contacts/contactsOperations';\nimport {\n  selectContactsError,\n  selectContactsIsLosding,\n} from 'redux/contacts/contactsSlice';\n\nconst Contacts = () => {\n  const authentificated = useSelector(selectUserAuthentificated);\n  const isLoading = useSelector(selectContactsIsLosding);\n  const error = useSelector(selectContactsError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!authentificated) return;\n\n    dispatch(requestContactsThunk());\n  }, [authentificated, dispatch]);\n\n  return (\n    <section>\n      <ContactForm />\n      {isLoading && <Loader />}\n      {error && <p>Ooops some error occured {error} </p>}\n      <ContactList />\n    </section>\n  );\n};\n\nexport default Contacts;\n\n// import { ContactForm } from \"components/ContactForm/ContactForm\"\n// import { ContactList } from \"components/ContactList/ContactList\"\n// import { Filter } from \"components/Filter/Filter\"\n\n// import { ContactForm } from 'components/ContactForm/ContactForm';\n// import { ContactList } from 'components/ContactList/ContactList';\n// import { Loader } from 'components/Loader/Loader';\n// import { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { selectUserAuthentificated } from 'redux/auth/authSlice';\n// import {\n//     addContactThunk,\n//     deleteContactThunk,\n//   requestContactsThunk,\n// } from 'redux/contacts/contactsOperations';\n// import {\n//   selectContactsError,\n//   selectContactsIsLosding,\n//     selectUserContacts,\n// } from 'redux/contacts/contactsSlice';\n\n// const Contacts = () => {\n//   const authentificated = useSelector(selectUserAuthentificated);\n//     const contacts = useSelector(selectUserContacts);\n//   const isLoading = useSelector(selectContactsIsLosding);\n//   const error = useSelector(selectContactsError);\n//   const dispatch = useDispatch();\n\n//   useEffect(() => {\n//     if (!authentificated) return;\n\n//     dispatch(requestContactsThunk());\n//   }, [authentificated, dispatch]);\n\n//     const handleDeleteContact = contactId => {\n//       dispatch(deleteContactThunk(contactId))\n//      }\n\n//     const handleSubmit = event => {\n//       event.preventDefault();\n\n//       const form = event.currentTarget;\n\n//       const name = form.elements.contactName.value;\n//       const number = form.elements.contactNumber.value;\n\n//       console.log('name', name);\n\n//       if(contacts.some(contact => contact.name === name))\n//       return alert(`Contact with name ${name} already exists!`  )\n\n//       dispatch( addContactThunk({name, number,})\n//       );\n\n//     };\n\n//     const showContacts = Array.isArray(contacts) && contacts.length > 0;\n\n//   return (\n//     <section>\n//       <form onSubmit={handleSubmit}>\n//         <label>\n//           <p>Name:</p>\n//           <input name=\"contactName\" type=\"tect\" required />\n//         </label>\n//         <br />\n//         <label>\n//           <p>Number:</p>\n//           <input name=\"contactNumber\" type=\"text\" required />\n//         </label>\n//         <br />\n//         <button type=\"submit\">Add contact</button>\n\n//       </form>\n\n//       <ContactForm />\n\n//       {isLoading && <Loader />}\n//       {error && <p>Ooops some error occured {error} </p>}\n//       <ul>\n//         {showContacts &&\n//           contacts.map(contact => {\n//             return (\n//               <li key={contact.id}>\n//                 <h3>Name: {contact.name}</h3>\n//                 <p>Number: {contact.number}</p>\n//                 <button type=\"button\" onClick={() => handleDeleteContact(contact.id)}> X </button>\n\n//               </li>\n//             );\n//           })}\n//       </ul>\n//       <ContactList />\n//     </section>\n//   );\n// };\n\n// export default Contacts;\n"],"names":["ContactForm","dispatch","useDispatch","contacts","useSelector","selectUserContacts","onSubmit","event","preventDefault","form","currentTarget","name","elements","contactName","value","number","contactNumber","console","log","some","contact","alert","addContactThunk","type","required","Filter","onChange","className","css","ContactList","showContacts","Array","isArray","length","useState","filterValue","setFilterValue","e","map","onClick","contactId","id","deleteContactThunk","authentificated","selectUserAuthentificated","isLoading","selectContactsIsLosding","error","selectContactsError","useEffect","requestContactsThunk","Loader"],"sourceRoot":""}